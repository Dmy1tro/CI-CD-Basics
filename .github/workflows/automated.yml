
# https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure/deploying-net-to-azure-app-service
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
# https://learn.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/actions-build

name: Automated Test & Build & Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: "Weather-api-12345"

jobs:
# Start test jobs

  # https://github.com/dorny/paths-filter#examples
  is-shared-changed:
    runs-on: ubuntu-latest
    outputs:
      is-changed: ${{ steps.filter.outputs.shared }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with: 
          base: master
          filters: |
            shared:
              - 'Weather.Shared/**'
              - 'Weather.Shared.Tests/**'

  is-web-changed:
    runs-on: ubuntu-latest
    outputs:
      is-changed: ${{ steps.filter.outputs.web }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with: 
          base: master
          filters: |
            web:
              - 'Weather/**'
              - 'Weather.Domain/**'
              - 'Weather.Domain.Tests/**'

  is-powershell-changed:
    runs-on: ubuntu-latest
    outputs:
      is-changed: ${{ steps.filter.outputs.powershell }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with: 
          base: master
          filters: |
            powershell:
              - 'Weather.Cmdlets/**'
              - 'Weather.Cmdlets.Tests/**'

  run-tests:
    needs: is-web-changed
    if: ${{ needs.is-web-changed.outputs.is-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Domain.Tests/Weather.Domain.Tests.csproj
      - name: Build tests
        run: dotnet build Weather.Domain.Tests/Weather.Domain.Tests.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test Weather.Domain.Tests/Weather.Domain.Tests.csproj --configuration Release --no-build --verbosity normal
  
  run-powershell-tests:
    needs: is-powershell-changed
    if: ${{ needs.is-powershell-changed.outputs.is-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Cmdlets.Tests/Weather.Cmdlets.Tests.csproj
      - name: Build tests
        run: dotnet build Weather.Cmdlets.Tests/Weather.Cmdlets.Tests.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test Weather.Cmdlets.Tests/Weather.Cmdlets.Tests.csproj --configuration Release --no-build --verbosity normal
  
  run-pester-tests:
    needs: is-powershell-changed
    if: ${{ needs.is-powershell-changed.outputs.is-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Invoke-Pester
        shell: pwsh
        run: |
          # install and import Pester
          if (-not (Get-Module -ListAvailable -Name Pester)) {
              Install-Module -Name Pester
          }

          if (-not (Get-Module -Name Pester)) {
              Import-Module Pester -Force -Global -PassThru
          }
          
          # Execute all tests
          $testScriptsPath = "Weather.Cmdlets.Tests/Pester"
      
          # Create the test results file
          $testResultsFile = "Weather.Cmdlets.Tests/TEST-Results.Pester.xml"
      
          if (Test-Path $testResultsFile) {
              Remove-Item -Path $testResultsFile
          }
      
          $pesterConfiguration = [PesterConfiguration]@{
              Run = @{
                  Path = $testScriptsPath;
              };
              TestResult = @{
                  Enabled = $true;
                  OutputPath = $testResultsFile;
                  OutputFormat = 'NUnitXML';
              };
              Filter = @{
                  ExcludeTag = 'Excluded';
              }
          }

          Invoke-Pester -Configuration $pesterConfiguration
      - name: Upload tests results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-pester
          path: '**/TEST-Results.Pester.xml'
          if-no-files-found: error

  run-shared-tests:
    needs: is-shared-changed
    if: ${{ needs.is-shared-changed.outputs.is-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Shared.Tests/Weather.Shared.Tests.csproj
      - name: Build tests
        run: dotnet build Weather.Shared.Tests/Weather.Shared.Tests.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test Weather.Shared.Tests/Weather.Shared.Tests.csproj --configuration Release --no-build --verbosity normal

# End test jobs

# Start Web jobs
  build-web:
    needs: [is-web-changed]
    if: ${{ needs.is-web-changed.outputs.is-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather/Weather.csproj
      - name: Build
        run: dotnet build Weather/Weather.csproj --configuration Release --no-restore
      - name: Publish
        run: dotnet publish Weather/Weather.csproj --configuration Release --output "Weather/publish_artifacts" --no-build
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: weather-api-artifacts
          path: "Weather/publish_artifacts/**"
          if-no-files-found: error

  deploy-dev:
    needs: [build-web, run-tests]
    # if: ${{ always() && needs.build-web.result == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: 'dev'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: weather-api-artifacts
          path: weather-api-artifacts
      - name: Deploy to Azure
        id: deploy-to-azure
        uses: azure/webapps-deploy@v2
        with:
          # just use the same azure web-app as a 'dev'.
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: weather-api-artifacts

  deploy-prod:
    needs: [build-web, run-tests]
    if: ${{ always() && needs.build-web.result == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: weather-api-artifacts
          path: weather-api-artifacts
      - name: Deploy to Azure
        id: deploy-to-azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: weather-api-artifacts

# End web jobs

# Start nuget package jobs
  prerelease-shared-nuget-package:
    needs: run-shared-tests
    runs-on: ubuntu-latest
    environment:
      name: 'nuget-prerelease'
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Create the prerelease package
        shell: pwsh
        run: |
          $version = [System.DateTime]::Now.ToString("yyyy.MM.dd.HHmm") + "-prerelease"
          dotnet pack Weather.Shared/Weather.Shared.csproj -p:PackageVersion=$version --configuration Release --output "Weather.Shared/package_artifacts"
      - name: Upload to nuget
        run: dotnet nuget push "Weather.Shared/package_artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  release-shared-nuget-package:
    needs: run-shared-tests
    runs-on: ubuntu-latest
    environment:
      name: 'nuget-release'
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Create the release package
        shell: pwsh
        run: |
          $version = [System.DateTime]::Now.ToString("yyyy.MM.dd.HHmm")
          dotnet pack Weather.Shared/Weather.Shared.csproj -p:PackageVersion=$version --configuration Release --output "Weather.Shared/package_artifacts"
      - name: Upload to nuget
        run: dotnet nuget push "Weather.Shared/package_artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  release-myget-package:
    needs: [run-pester-tests, run-powershell-tests]
    runs-on: ubuntu-latest
    environment:
      name: 'myget-release'
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Cmdlets/Weather.Cmdlets.csproj
      - name: Build cmdlets
        run: dotnet build Weather.Cmdlets/Weather.Cmdlets.csproj --configuration Release --no-restore
      - name: Upload to myget
        shell: pwsh
        run: |
          Import-Module PowerShellGet
          $FeedName = "ci-cd-basics-packages"
          $PSGalleryPublishUri = 'https://www.myget.org/F/$FeedName/api/v2/package'
          $PSGallerySourceUri = 'https://www.myget.org/F/$FeedName/api/v2'
          $APIKey = "5d8d8afa-e399-4cb4-965e-edab5944268e"

          # Publish the module the the SkyKick MyGet PowerShell feed
          $ModulePath = "Weather.Cmdlets/Release/net6.0"
          Register-PSRepository -Name $FeedName -SourceLocation $PSGallerySourceUri -PublishLocation $PSGalleryPublishUri
          Publish-Module -Path $(ModulePath) -NuGetApiKey $APIKey -Repository $FeedName -Verbose

# End nuget package jobs
