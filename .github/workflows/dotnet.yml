
# https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure/deploying-net-to-azure-app-service
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
# https://learn.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/actions-build

name: Test & Build & Deploy Weather API

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  AZURE_WEBAPP_NAME: "Weather-api-12345"

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Domain.Tests/Weather.Domain.Tests.csproj
      - name: Build tests
        run: dotnet build Weather.Domain.Tests/Weather.Domain.Tests.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test Weather.Domain.Tests/Weather.Domain.Tests.csproj --configuration Release --no-build --verbosity normal
  
  run_powershell_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Cmdlets.Tests/Weather.Cmdlets.Tests.csproj
      - name: Build tests
        run: dotnet build Weather.Cmdlets.Tests/Weather.Cmdlets.Tests.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test Weather.Cmdlets.Tests/Weather.Cmdlets.Tests.csproj --configuration Release --no-build --verbosity normal
  
  run_shared_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather.Shared.Tests/Weather.Shared.Tests.csproj
      - name: Build tests
        run: dotnet build Weather.Shared.Tests/Weather.Shared.Tests.csproj --configuration Release --no-restore
      - name: Run tests
        run: dotnet test Weather.Shared.Tests/Weather.Shared.Tests.csproj --configuration Release --no-build --verbosity normal

  build-web:
    needs: [run_tests, run_powershell_tests]
    runs-on: ubuntu-latest
    # This 'if' just for testing purposes
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Weather/Weather.csproj
      - name: Build
        run: dotnet build Weather/Weather.csproj --configuration Release --no-restore
      - name: Publish
        run: dotnet publish Weather/Weather.csproj --configuration Release --output "Weather/publish_artifacts" --no-build
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: weather-api-artifacts
          path: "Weather/publish_artifacts/**"
          if-no-files-found: error

  build-shared-package:
    needs: run_shared_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      # - name: Restore dependencies
      #   run: dotnet restore Weather.Shared/Weather.Shared.csproj
      # - name: Build
      #   run: dotnet build Weather.Shared/Weather.Shared.csproj --configuration Release --no-restore
      - name: Create the prerelease package
        if: ${{ github.event_name == 'pull_request' }}
        run: dotnet pack Weather.Shared/Weather.Shared.csproj --version-suffix "prerelease" --configuration Release --output "Weather.Shared/package_artifacts"
      - name: Create the release package
        if: ${{ github.event_name == 'push' }}
        run: dotnet pack Weather.Shared/Weather.Shared.csproj --configuration Release --output "Weather.Shared/package_artifacts"
      - name: Upload a Package Artifact
        uses: actions/upload-artifact@v3
        with:
          name: weather-shared-artifacts
          path: "Weather.Shared/package_artifacts/**"
          if-no-files-found: error

  deploy-prod:
    needs: build-web
    runs-on: ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: weather-api-artifacts
          path: weather-api-artifacts
      - name: Deploy to Azure
        id: deploy-to-azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: weather-api-artifacts

  release-shared-nuget-package:
    needs: build-shared-package
    runs-on: ubuntu-latest
    environment:
      name: 'nuget'
    steps:
      - name: Download a Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: weather-shared-artifacts
          path: weather-shared-artifacts
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Upload to nuget
        run: dotnet nuget push "weather-shared-artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  deploy-dev:
    needs: build-web
    runs-on: ubuntu-latest
    environment:
      name: 'dev'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: weather-api-artifacts
          path: weather-api-artifacts
      - name: Deploy to Azure
        id: deploy-to-azure
        uses: azure/webapps-deploy@v2
        with:
          # just use the same azure web-app as a 'dev'.
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: weather-api-artifacts
